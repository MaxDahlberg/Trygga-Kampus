rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{uid}/selfAssessments/{dateId} {
      allow read: if isOwner(uid);
      allow delete: if isOwner(uid);
      allow create: if isOwner(uid) && validateData(true);
      allow update: if isOwner(uid) && validateData(false);

      function isOwner(uid) { return request.auth != null && request.auth.uid == uid; }

      function validateData(isCreate) {
        return hasOnlyAllowedFields() &&
               request.resource.data.uid == uid &&
               request.resource.data.date == dateId &&
               validDateId(dateId) &&
               validScores() &&
               validNote() &&
               ('updatedAt' in request.resource.data) &&
               (isCreate ? ('createdAt' in request.resource.data) : (('createdAt' in request.resource.data) ? request.resource.data.createdAt == resource.data.createdAt : true));
      }

      function hasOnlyAllowedFields() {
        let allowed = ['uid','date','selfImage','selfEsteem','selfReliance','note','createdAt','updatedAt','tz'];
        return request.resource.data.keys().hasOnly(allowed);
      }

      function validDateId(d) { return d.matches('^\\d{4}-\\d{2}-\\d{2}$'); }

      function validScores() {
        return isValidScore('selfImage') && isValidScore('selfEsteem') && isValidScore('selfReliance');
      }

      function isValidScore(field) {
        return !(field in request.resource.data) || request.resource.data[field] == null ||
               (request.resource.data[field] is int && request.resource.data[field] >= 1 && request.resource.data[field] <= 10);
      }

      function validNote() {
        return !('note' in request.resource.data) || request.resource.data.note == null ||
               (request.resource.data.note is string && request.resource.data.note.size() <= 500);
      }
    }
  }
}
